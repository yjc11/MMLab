2023-02-04 23:57:36,820 - mmcls - INFO - Environment info:
------------------------------------------------------------
sys.platform: linux
Python: 3.8.10 (default, Jun  4 2021, 15:09:15) [GCC 7.5.0]
CUDA available: True
GPU 0: NVIDIA GeForce GTX 1080 Ti
CUDA_HOME: /usr/local/cuda
NVCC: Cuda compilation tools, release 11.3, V11.3.109
GCC: gcc (Ubuntu 9.3.0-17ubuntu1~20.04) 9.3.0
PyTorch: 1.10.0+cu113
PyTorch compiling details: PyTorch built with:
  - GCC 7.3
  - C++ Version: 201402
  - Intel(R) Math Kernel Library Version 2020.0.0 Product Build 20191122 for Intel(R) 64 architecture applications
  - Intel(R) MKL-DNN v2.2.3 (Git Hash 7336ca9f055cf1bfa13efb658fe15dc9b41f0740)
  - OpenMP 201511 (a.k.a. OpenMP 4.5)
  - LAPACK is enabled (usually provided by MKL)
  - NNPACK is enabled
  - CPU capability usage: AVX2
  - CUDA Runtime 11.3
  - NVCC architecture flags: -gencode;arch=compute_37,code=sm_37;-gencode;arch=compute_50,code=sm_50;-gencode;arch=compute_60,code=sm_60;-gencode;arch=compute_70,code=sm_70;-gencode;arch=compute_75,code=sm_75;-gencode;arch=compute_80,code=sm_80;-gencode;arch=compute_86,code=sm_86
  - CuDNN 8.2
  - Magma 2.5.2
  - Build settings: BLAS_INFO=mkl, BUILD_TYPE=Release, CUDA_VERSION=11.3, CUDNN_VERSION=8.2.0, CXX_COMPILER=/opt/rh/devtoolset-7/root/usr/bin/c++, CXX_FLAGS= -Wno-deprecated -fvisibility-inlines-hidden -DUSE_PTHREADPOOL -fopenmp -DNDEBUG -DUSE_KINETO -DUSE_FBGEMM -DUSE_QNNPACK -DUSE_PYTORCH_QNNPACK -DUSE_XNNPACK -DSYMBOLICATE_MOBILE_DEBUG_HANDLE -DEDGE_PROFILER_USE_KINETO -O2 -fPIC -Wno-narrowing -Wall -Wextra -Werror=return-type -Wno-missing-field-initializers -Wno-type-limits -Wno-array-bounds -Wno-unknown-pragmas -Wno-sign-compare -Wno-unused-parameter -Wno-unused-variable -Wno-unused-function -Wno-unused-result -Wno-unused-local-typedefs -Wno-strict-overflow -Wno-strict-aliasing -Wno-error=deprecated-declarations -Wno-stringop-overflow -Wno-psabi -Wno-error=pedantic -Wno-error=redundant-decls -Wno-error=old-style-cast -fdiagnostics-color=always -faligned-new -Wno-unused-but-set-variable -Wno-maybe-uninitialized -fno-math-errno -fno-trapping-math -Werror=format -Wno-stringop-overflow, LAPACK_INFO=mkl, PERF_WITH_AVX=1, PERF_WITH_AVX2=1, PERF_WITH_AVX512=1, TORCH_VERSION=1.10.0, USE_CUDA=ON, USE_CUDNN=ON, USE_EXCEPTION_PTR=1, USE_GFLAGS=OFF, USE_GLOG=OFF, USE_MKL=ON, USE_MKLDNN=ON, USE_MPI=OFF, USE_NCCL=ON, USE_NNPACK=ON, USE_OPENMP=ON, 

TorchVision: 0.11.1+cu113
OpenCV: 4.6.0
MMCV: 1.6.1
MMCV Compiler: GCC 9.3
MMCV CUDA Compiler: 11.3
MMClassification: 0.25.0+
------------------------------------------------------------

2023-02-04 23:57:36,820 - mmcls - INFO - Distributed training: False
2023-02-04 23:57:37,004 - mmcls - INFO - Config:
model = dict(
    type='ImageClassifier',
    backbone=dict(type='MobileNetV2', widen_factor=1.0),
    neck=dict(type='GlobalAveragePooling'),
    head=dict(
        type='LinearClsHead',
        num_classes=5,
        in_channels=1280,
        loss=dict(type='CrossEntropyLoss', loss_weight=1.0),
        topk=(1, 5)))
load_from = 'mobilenet_v2_batch256_imagenet_20200708-3b2dc3af.pth'
data = dict(
    samples_per_gpu=32,
    workers_per_gpu=2,
    train=dict(
        type='CustomDataset',
        data_prefix='data/train',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='RandomResizedCrop', size=224, backend='pillow'),
            dict(type='RandomFlip', flip_prob=0.5, direction='horizontal'),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='ToTensor', keys=['gt_label']),
            dict(type='Collect', keys=['img', 'gt_label'])
        ]),
    val=dict(
        type='CustomDataset',
        data_prefix='data/val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1), backend='pillow'),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]),
    test=dict(
        type='CustomDataset',
        data_prefix='data/val',
        pipeline=[
            dict(type='LoadImageFromFile'),
            dict(type='Resize', size=(256, -1), backend='pillow'),
            dict(type='CenterCrop', crop_size=224),
            dict(
                type='Normalize',
                mean=[123.675, 116.28, 103.53],
                std=[58.395, 57.12, 57.375],
                to_rgb=True),
            dict(type='ImageToTensor', keys=['img']),
            dict(type='Collect', keys=['img'])
        ]))
evaluation = dict(interval=1, metric='accuracy')
optimizer = dict(type='SGD', lr=0.005, momentum=0.9, weight_decay=4e-05)
optimizer_config = dict(grad_clip=None)
lr_config = dict(policy='step', gamma=0.98, step=1)
runner = dict(type='EpochBasedRunner', max_epochs=20)
checkpoint_config = dict(interval=10)
log_config = dict(interval=10, hooks=[dict(type='TextLoggerHook')])
dist_params = dict(backend='nccl')
log_level = 'INFO'
resume_from = None
workflow = [('train', 1)]
work_dir = './work_dirs/mobilenet-v2_8xb32_in1k'
gpu_ids = range(0, 1)

2023-02-04 23:57:37,005 - mmcls - INFO - Set random seed to 1484166784, deterministic: False
2023-02-04 23:57:37,107 - mmcls - INFO - initialize MobileNetV2 with init_cfg [{'type': 'Kaiming', 'layer': ['Conv2d']}, {'type': 'Constant', 'val': 1, 'layer': ['_BatchNorm', 'GroupNorm']}]
2023-02-04 23:57:37,163 - mmcls - INFO - initialize LinearClsHead with init_cfg {'type': 'Normal', 'layer': 'Linear', 'std': 0.01}
Name of parameter - Initialization information

backbone.conv1.conv.weight - torch.Size([32, 3, 3, 3]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.conv1.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.conv1.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv.0.conv.weight - torch.Size([32, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.conv.0.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv.0.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv.1.conv.weight - torch.Size([16, 32, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer1.0.conv.1.bn.weight - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer1.0.conv.1.bn.bias - torch.Size([16]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv.0.conv.weight - torch.Size([96, 16, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.conv.0.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv.0.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv.1.conv.weight - torch.Size([96, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.conv.1.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv.1.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv.2.conv.weight - torch.Size([24, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.0.conv.2.bn.weight - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.0.conv.2.bn.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv.0.conv.weight - torch.Size([144, 24, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.conv.0.bn.weight - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv.0.bn.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv.1.conv.weight - torch.Size([144, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.conv.1.bn.weight - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv.1.bn.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv.2.conv.weight - torch.Size([24, 144, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer2.1.conv.2.bn.weight - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer2.1.conv.2.bn.bias - torch.Size([24]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv.0.conv.weight - torch.Size([144, 24, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.conv.0.bn.weight - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv.0.bn.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv.1.conv.weight - torch.Size([144, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.conv.1.bn.weight - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv.1.bn.bias - torch.Size([144]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv.2.conv.weight - torch.Size([32, 144, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.0.conv.2.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.0.conv.2.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv.0.conv.weight - torch.Size([192, 32, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.conv.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv.1.conv.weight - torch.Size([192, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.conv.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv.2.conv.weight - torch.Size([32, 192, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.1.conv.2.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.1.conv.2.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv.0.conv.weight - torch.Size([192, 32, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.conv.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv.1.conv.weight - torch.Size([192, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.conv.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv.2.conv.weight - torch.Size([32, 192, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer3.2.conv.2.bn.weight - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer3.2.conv.2.bn.bias - torch.Size([32]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv.0.conv.weight - torch.Size([192, 32, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.conv.0.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv.0.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv.1.conv.weight - torch.Size([192, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.conv.1.bn.weight - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv.1.bn.bias - torch.Size([192]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv.2.conv.weight - torch.Size([64, 192, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.0.conv.2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.0.conv.2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv.0.conv.weight - torch.Size([384, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.conv.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv.1.conv.weight - torch.Size([384, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.conv.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv.2.conv.weight - torch.Size([64, 384, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.1.conv.2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.1.conv.2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv.0.conv.weight - torch.Size([384, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.conv.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv.1.conv.weight - torch.Size([384, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.conv.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv.2.conv.weight - torch.Size([64, 384, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.2.conv.2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.2.conv.2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.3.conv.0.conv.weight - torch.Size([384, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.3.conv.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.3.conv.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.3.conv.1.conv.weight - torch.Size([384, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.3.conv.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.3.conv.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.3.conv.2.conv.weight - torch.Size([64, 384, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer4.3.conv.2.bn.weight - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer4.3.conv.2.bn.bias - torch.Size([64]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.0.conv.0.conv.weight - torch.Size([384, 64, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.0.conv.0.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.0.conv.0.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.0.conv.1.conv.weight - torch.Size([384, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.0.conv.1.bn.weight - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.0.conv.1.bn.bias - torch.Size([384]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.0.conv.2.conv.weight - torch.Size([96, 384, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.0.conv.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.0.conv.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.1.conv.0.conv.weight - torch.Size([576, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.1.conv.0.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.1.conv.0.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.1.conv.1.conv.weight - torch.Size([576, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.1.conv.1.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.1.conv.1.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.1.conv.2.conv.weight - torch.Size([96, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.1.conv.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.1.conv.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.2.conv.0.conv.weight - torch.Size([576, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.2.conv.0.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.2.conv.0.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.2.conv.1.conv.weight - torch.Size([576, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.2.conv.1.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.2.conv.1.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.2.conv.2.conv.weight - torch.Size([96, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer5.2.conv.2.bn.weight - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer5.2.conv.2.bn.bias - torch.Size([96]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.0.conv.0.conv.weight - torch.Size([576, 96, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.0.conv.0.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.0.conv.0.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.0.conv.1.conv.weight - torch.Size([576, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.0.conv.1.bn.weight - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.0.conv.1.bn.bias - torch.Size([576]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.0.conv.2.conv.weight - torch.Size([160, 576, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.0.conv.2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.0.conv.2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.1.conv.0.conv.weight - torch.Size([960, 160, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.1.conv.0.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.1.conv.0.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.1.conv.1.conv.weight - torch.Size([960, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.1.conv.1.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.1.conv.1.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.1.conv.2.conv.weight - torch.Size([160, 960, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.1.conv.2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.1.conv.2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.2.conv.0.conv.weight - torch.Size([960, 160, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.2.conv.0.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.2.conv.0.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.2.conv.1.conv.weight - torch.Size([960, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.2.conv.1.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.2.conv.1.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.2.conv.2.conv.weight - torch.Size([160, 960, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer6.2.conv.2.bn.weight - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer6.2.conv.2.bn.bias - torch.Size([160]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.0.conv.0.conv.weight - torch.Size([960, 160, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer7.0.conv.0.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.0.conv.0.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.0.conv.1.conv.weight - torch.Size([960, 1, 3, 3]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer7.0.conv.1.bn.weight - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.0.conv.1.bn.bias - torch.Size([960]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.0.conv.2.conv.weight - torch.Size([320, 960, 1, 1]): 
KaimingInit: a=0, mode=fan_out, nonlinearity=relu, distribution =normal, bias=0 

backbone.layer7.0.conv.2.bn.weight - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.layer7.0.conv.2.bn.bias - torch.Size([320]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.conv2.conv.weight - torch.Size([1280, 320, 1, 1]): 
Initialized by user-defined `init_weights` in ConvModule  

backbone.conv2.bn.weight - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

backbone.conv2.bn.bias - torch.Size([1280]): 
The value is the same before and after calling `init_weights` of ImageClassifier  

head.fc.weight - torch.Size([5, 1280]): 
NormalInit: mean=0, std=0.01, bias=0 

head.fc.bias - torch.Size([5]): 
NormalInit: mean=0, std=0.01, bias=0 
2023-02-04 23:57:42,040 - mmcls - INFO - load checkpoint from local path: mobilenet_v2_batch256_imagenet_20200708-3b2dc3af.pth
2023-02-04 23:57:42,084 - mmcls - WARNING - The model and loaded state dict do not match exactly

size mismatch for head.fc.weight: copying a param with shape torch.Size([1000, 1280]) from checkpoint, the shape in current model is torch.Size([5, 1280]).
size mismatch for head.fc.bias: copying a param with shape torch.Size([1000]) from checkpoint, the shape in current model is torch.Size([5]).
2023-02-04 23:57:42,084 - mmcls - INFO - Start running, host: root@autodl-container-88b111a1ac-9e18945e, work_dir: /root/mmcls/work_dirs/mobilenet-v2_8xb32_in1k
2023-02-04 23:57:42,085 - mmcls - INFO - Hooks will be executed in the following order:
before_run:
(VERY_HIGH   ) StepLrUpdaterHook                  
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_epoch:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_train_iter:
(VERY_HIGH   ) StepLrUpdaterHook                  
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
 -------------------- 
after_train_iter:
(ABOVE_NORMAL) OptimizerHook                      
(NORMAL      ) CheckpointHook                     
(LOW         ) IterTimerHook                      
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_train_epoch:
(NORMAL      ) CheckpointHook                     
(LOW         ) EvalHook                           
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_epoch:
(LOW         ) IterTimerHook                      
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
before_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_iter:
(LOW         ) IterTimerHook                      
 -------------------- 
after_val_epoch:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
after_run:
(VERY_LOW    ) TextLoggerHook                     
 -------------------- 
2023-02-04 23:57:42,085 - mmcls - INFO - workflow: [('train', 1)], max: 20 epochs
2023-02-04 23:57:42,085 - mmcls - INFO - Checkpoints will be saved to /root/mmcls/work_dirs/mobilenet-v2_8xb32_in1k by HardDiskBackend.
2023-02-04 23:57:45,759 - mmcls - INFO - Epoch [1][10/72]	lr: 5.000e-03, eta: 0:08:40, time: 0.364, data_time: 0.249, memory: 2455, loss: 1.1785
2023-02-04 23:57:46,690 - mmcls - INFO - Epoch [1][20/72]	lr: 5.000e-03, eta: 0:05:24, time: 0.093, data_time: 0.004, memory: 2455, loss: 0.5096
2023-02-04 23:57:47,628 - mmcls - INFO - Epoch [1][30/72]	lr: 5.000e-03, eta: 0:04:18, time: 0.093, data_time: 0.003, memory: 2455, loss: 0.4538
2023-02-04 23:57:48,587 - mmcls - INFO - Epoch [1][40/72]	lr: 5.000e-03, eta: 0:03:46, time: 0.096, data_time: 0.011, memory: 2455, loss: 0.4148
2023-02-04 23:57:49,584 - mmcls - INFO - Epoch [1][50/72]	lr: 5.000e-03, eta: 0:03:27, time: 0.100, data_time: 0.025, memory: 2455, loss: 0.6067
2023-02-04 23:57:50,605 - mmcls - INFO - Epoch [1][60/72]	lr: 5.000e-03, eta: 0:03:15, time: 0.102, data_time: 0.027, memory: 2455, loss: 0.5804
2023-02-04 23:57:51,559 - mmcls - INFO - Epoch [1][70/72]	lr: 5.000e-03, eta: 0:03:04, time: 0.095, data_time: 0.018, memory: 2455, loss: 0.3902
2023-02-04 23:57:53,650 - mmcls - INFO - Epoch(val) [1][18]	accuracy_top-1: 91.4336, accuracy_top-5: 100.0000
2023-02-04 23:57:56,827 - mmcls - INFO - Epoch [2][10/72]	lr: 4.900e-03, eta: 0:03:28, time: 0.314, data_time: 0.233, memory: 2455, loss: 0.4580
2023-02-04 23:57:57,773 - mmcls - INFO - Epoch [2][20/72]	lr: 4.900e-03, eta: 0:03:18, time: 0.095, data_time: 0.007, memory: 2455, loss: 0.3559
2023-02-04 23:57:58,776 - mmcls - INFO - Epoch [2][30/72]	lr: 4.900e-03, eta: 0:03:10, time: 0.100, data_time: 0.024, memory: 2455, loss: 0.3683
2023-02-04 23:57:59,722 - mmcls - INFO - Epoch [2][40/72]	lr: 4.900e-03, eta: 0:03:03, time: 0.094, data_time: 0.011, memory: 2455, loss: 0.2837
2023-02-04 23:58:00,680 - mmcls - INFO - Epoch [2][50/72]	lr: 4.900e-03, eta: 0:02:57, time: 0.096, data_time: 0.016, memory: 2455, loss: 0.4818
2023-02-04 23:58:01,666 - mmcls - INFO - Epoch [2][60/72]	lr: 4.900e-03, eta: 0:02:52, time: 0.099, data_time: 0.021, memory: 2455, loss: 0.3835
2023-02-04 23:58:02,644 - mmcls - INFO - Epoch [2][70/72]	lr: 4.900e-03, eta: 0:02:48, time: 0.098, data_time: 0.018, memory: 2455, loss: 0.3408
2023-02-04 23:58:04,780 - mmcls - INFO - Epoch(val) [2][18]	accuracy_top-1: 91.4336, accuracy_top-5: 100.0000
2023-02-04 23:58:07,986 - mmcls - INFO - Epoch [3][10/72]	lr: 4.802e-03, eta: 0:03:00, time: 0.317, data_time: 0.239, memory: 2455, loss: 0.6439
2023-02-04 23:58:08,936 - mmcls - INFO - Epoch [3][20/72]	lr: 4.802e-03, eta: 0:02:55, time: 0.096, data_time: 0.019, memory: 2455, loss: 0.3739
2023-02-04 23:58:09,899 - mmcls - INFO - Epoch [3][30/72]	lr: 4.802e-03, eta: 0:02:50, time: 0.095, data_time: 0.016, memory: 2455, loss: 0.4233
2023-02-04 23:58:10,899 - mmcls - INFO - Epoch [3][40/72]	lr: 4.802e-03, eta: 0:02:47, time: 0.100, data_time: 0.024, memory: 2455, loss: 0.3740
2023-02-04 23:58:11,854 - mmcls - INFO - Epoch [3][50/72]	lr: 4.802e-03, eta: 0:02:43, time: 0.095, data_time: 0.010, memory: 2455, loss: 0.3640
2023-02-04 23:58:12,857 - mmcls - INFO - Epoch [3][60/72]	lr: 4.802e-03, eta: 0:02:40, time: 0.100, data_time: 0.017, memory: 2455, loss: 0.3455
2023-02-04 23:58:13,837 - mmcls - INFO - Epoch [3][70/72]	lr: 4.802e-03, eta: 0:02:37, time: 0.099, data_time: 0.018, memory: 2455, loss: 0.3404
2023-02-04 23:58:15,902 - mmcls - INFO - Epoch(val) [3][18]	accuracy_top-1: 92.4825, accuracy_top-5: 100.0000
2023-02-04 23:58:19,127 - mmcls - INFO - Epoch [4][10/72]	lr: 4.706e-03, eta: 0:02:44, time: 0.318, data_time: 0.238, memory: 2455, loss: 0.2588
2023-02-04 23:58:20,061 - mmcls - INFO - Epoch [4][20/72]	lr: 4.706e-03, eta: 0:02:40, time: 0.094, data_time: 0.022, memory: 2455, loss: 0.2981
2023-02-04 23:58:21,002 - mmcls - INFO - Epoch [4][30/72]	lr: 4.706e-03, eta: 0:02:37, time: 0.094, data_time: 0.015, memory: 2455, loss: 0.3048
2023-02-04 23:58:21,990 - mmcls - INFO - Epoch [4][40/72]	lr: 4.706e-03, eta: 0:02:34, time: 0.098, data_time: 0.016, memory: 2455, loss: 0.2607
2023-02-04 23:58:22,966 - mmcls - INFO - Epoch [4][50/72]	lr: 4.706e-03, eta: 0:02:31, time: 0.098, data_time: 0.023, memory: 2455, loss: 0.3153
2023-02-04 23:58:23,905 - mmcls - INFO - Epoch [4][60/72]	lr: 4.706e-03, eta: 0:02:29, time: 0.096, data_time: 0.005, memory: 2455, loss: 0.1688
2023-02-04 23:58:24,841 - mmcls - INFO - Epoch [4][70/72]	lr: 4.706e-03, eta: 0:02:26, time: 0.093, data_time: 0.008, memory: 2455, loss: 0.2714
2023-02-04 23:58:26,944 - mmcls - INFO - Epoch(val) [4][18]	accuracy_top-1: 92.3077, accuracy_top-5: 100.0000
2023-02-04 23:58:30,195 - mmcls - INFO - Epoch [5][10/72]	lr: 4.612e-03, eta: 0:02:31, time: 0.321, data_time: 0.243, memory: 2455, loss: 0.2604
2023-02-04 23:58:31,238 - mmcls - INFO - Epoch [5][20/72]	lr: 4.612e-03, eta: 0:02:29, time: 0.105, data_time: 0.027, memory: 2455, loss: 0.2737
2023-02-04 23:58:32,312 - mmcls - INFO - Epoch [5][30/72]	lr: 4.612e-03, eta: 0:02:26, time: 0.107, data_time: 0.032, memory: 2455, loss: 0.2508
2023-02-04 23:58:33,382 - mmcls - INFO - Epoch [5][40/72]	lr: 4.612e-03, eta: 0:02:24, time: 0.107, data_time: 0.028, memory: 2455, loss: 0.2440
2023-02-04 23:58:34,342 - mmcls - INFO - Epoch [5][50/72]	lr: 4.612e-03, eta: 0:02:22, time: 0.096, data_time: 0.017, memory: 2455, loss: 0.2566
2023-02-04 23:58:35,414 - mmcls - INFO - Epoch [5][60/72]	lr: 4.612e-03, eta: 0:02:20, time: 0.107, data_time: 0.030, memory: 2455, loss: 0.3083
2023-02-04 23:58:36,393 - mmcls - INFO - Epoch [5][70/72]	lr: 4.612e-03, eta: 0:02:18, time: 0.098, data_time: 0.022, memory: 2455, loss: 0.1778
2023-02-04 23:58:38,421 - mmcls - INFO - Epoch(val) [5][18]	accuracy_top-1: 92.6573, accuracy_top-5: 100.0000
2023-02-04 23:58:41,626 - mmcls - INFO - Epoch [6][10/72]	lr: 4.520e-03, eta: 0:02:21, time: 0.317, data_time: 0.236, memory: 2455, loss: 0.4722
2023-02-04 23:58:42,602 - mmcls - INFO - Epoch [6][20/72]	lr: 4.520e-03, eta: 0:02:19, time: 0.098, data_time: 0.020, memory: 2455, loss: 0.3181
2023-02-04 23:58:43,565 - mmcls - INFO - Epoch [6][30/72]	lr: 4.520e-03, eta: 0:02:16, time: 0.096, data_time: 0.014, memory: 2455, loss: 0.3314
2023-02-04 23:58:44,513 - mmcls - INFO - Epoch [6][40/72]	lr: 4.520e-03, eta: 0:02:14, time: 0.095, data_time: 0.012, memory: 2455, loss: 0.3019
2023-02-04 23:58:45,501 - mmcls - INFO - Epoch [6][50/72]	lr: 4.520e-03, eta: 0:02:12, time: 0.099, data_time: 0.023, memory: 2455, loss: 0.2777
2023-02-04 23:58:46,511 - mmcls - INFO - Epoch [6][60/72]	lr: 4.520e-03, eta: 0:02:10, time: 0.101, data_time: 0.022, memory: 2455, loss: 0.2305
2023-02-04 23:58:47,488 - mmcls - INFO - Epoch [6][70/72]	lr: 4.520e-03, eta: 0:02:08, time: 0.097, data_time: 0.018, memory: 2455, loss: 0.2770
2023-02-04 23:58:49,466 - mmcls - INFO - Epoch(val) [6][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-04 23:58:52,646 - mmcls - INFO - Epoch [7][10/72]	lr: 4.429e-03, eta: 0:02:10, time: 0.314, data_time: 0.236, memory: 2455, loss: 0.3212
2023-02-04 23:58:53,594 - mmcls - INFO - Epoch [7][20/72]	lr: 4.429e-03, eta: 0:02:08, time: 0.095, data_time: 0.015, memory: 2455, loss: 0.2996
2023-02-04 23:58:54,575 - mmcls - INFO - Epoch [7][30/72]	lr: 4.429e-03, eta: 0:02:06, time: 0.098, data_time: 0.022, memory: 2455, loss: 0.2177
2023-02-04 23:58:55,522 - mmcls - INFO - Epoch [7][40/72]	lr: 4.429e-03, eta: 0:02:04, time: 0.095, data_time: 0.003, memory: 2455, loss: 0.2592
2023-02-04 23:58:56,471 - mmcls - INFO - Epoch [7][50/72]	lr: 4.429e-03, eta: 0:02:02, time: 0.095, data_time: 0.004, memory: 2455, loss: 0.2143
2023-02-04 23:58:57,404 - mmcls - INFO - Epoch [7][60/72]	lr: 4.429e-03, eta: 0:02:00, time: 0.092, data_time: 0.003, memory: 2455, loss: 0.1711
2023-02-04 23:58:58,338 - mmcls - INFO - Epoch [7][70/72]	lr: 4.429e-03, eta: 0:01:58, time: 0.093, data_time: 0.004, memory: 2455, loss: 0.2095
2023-02-04 23:59:00,270 - mmcls - INFO - Epoch(val) [7][18]	accuracy_top-1: 93.3566, accuracy_top-5: 100.0000
2023-02-04 23:59:03,461 - mmcls - INFO - Epoch [8][10/72]	lr: 4.341e-03, eta: 0:02:00, time: 0.316, data_time: 0.236, memory: 2455, loss: 0.1823
2023-02-04 23:59:04,409 - mmcls - INFO - Epoch [8][20/72]	lr: 4.341e-03, eta: 0:01:58, time: 0.095, data_time: 0.013, memory: 2455, loss: 0.1912
2023-02-04 23:59:05,452 - mmcls - INFO - Epoch [8][30/72]	lr: 4.341e-03, eta: 0:01:56, time: 0.104, data_time: 0.026, memory: 2455, loss: 0.1193
2023-02-04 23:59:06,387 - mmcls - INFO - Epoch [8][40/72]	lr: 4.341e-03, eta: 0:01:54, time: 0.094, data_time: 0.007, memory: 2455, loss: 0.1541
2023-02-04 23:59:07,347 - mmcls - INFO - Epoch [8][50/72]	lr: 4.341e-03, eta: 0:01:52, time: 0.096, data_time: 0.004, memory: 2455, loss: 0.1806
2023-02-04 23:59:08,278 - mmcls - INFO - Epoch [8][60/72]	lr: 4.341e-03, eta: 0:01:51, time: 0.093, data_time: 0.013, memory: 2455, loss: 0.1928
2023-02-04 23:59:09,269 - mmcls - INFO - Epoch [8][70/72]	lr: 4.341e-03, eta: 0:01:49, time: 0.100, data_time: 0.011, memory: 2455, loss: 0.2276
2023-02-04 23:59:11,280 - mmcls - INFO - Epoch(val) [8][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-04 23:59:14,539 - mmcls - INFO - Epoch [9][10/72]	lr: 4.254e-03, eta: 0:01:50, time: 0.322, data_time: 0.241, memory: 2455, loss: 0.1783
2023-02-04 23:59:15,485 - mmcls - INFO - Epoch [9][20/72]	lr: 4.254e-03, eta: 0:01:48, time: 0.094, data_time: 0.009, memory: 2455, loss: 0.1438
2023-02-04 23:59:16,447 - mmcls - INFO - Epoch [9][30/72]	lr: 4.254e-03, eta: 0:01:46, time: 0.097, data_time: 0.019, memory: 2455, loss: 0.1689
2023-02-04 23:59:17,427 - mmcls - INFO - Epoch [9][40/72]	lr: 4.254e-03, eta: 0:01:45, time: 0.099, data_time: 0.016, memory: 2455, loss: 0.1424
2023-02-04 23:59:18,493 - mmcls - INFO - Epoch [9][50/72]	lr: 4.254e-03, eta: 0:01:43, time: 0.106, data_time: 0.031, memory: 2455, loss: 0.1302
2023-02-04 23:59:19,434 - mmcls - INFO - Epoch [9][60/72]	lr: 4.254e-03, eta: 0:01:41, time: 0.094, data_time: 0.010, memory: 2455, loss: 0.1628
2023-02-04 23:59:20,418 - mmcls - INFO - Epoch [9][70/72]	lr: 4.254e-03, eta: 0:01:40, time: 0.098, data_time: 0.022, memory: 2455, loss: 0.0978
2023-02-04 23:59:22,410 - mmcls - INFO - Epoch(val) [9][18]	accuracy_top-1: 93.1818, accuracy_top-5: 100.0000
2023-02-04 23:59:25,682 - mmcls - INFO - Epoch [10][10/72]	lr: 4.169e-03, eta: 0:01:40, time: 0.323, data_time: 0.245, memory: 2455, loss: 0.4264
2023-02-04 23:59:26,641 - mmcls - INFO - Epoch [10][20/72]	lr: 4.169e-03, eta: 0:01:39, time: 0.096, data_time: 0.016, memory: 2455, loss: 0.2855
2023-02-04 23:59:27,576 - mmcls - INFO - Epoch [10][30/72]	lr: 4.169e-03, eta: 0:01:37, time: 0.094, data_time: 0.004, memory: 2455, loss: 0.3767
2023-02-04 23:59:28,529 - mmcls - INFO - Epoch [10][40/72]	lr: 4.169e-03, eta: 0:01:35, time: 0.094, data_time: 0.013, memory: 2455, loss: 0.2531
2023-02-04 23:59:29,537 - mmcls - INFO - Epoch [10][50/72]	lr: 4.169e-03, eta: 0:01:34, time: 0.101, data_time: 0.023, memory: 2455, loss: 0.2295
2023-02-04 23:59:30,504 - mmcls - INFO - Epoch [10][60/72]	lr: 4.169e-03, eta: 0:01:32, time: 0.097, data_time: 0.019, memory: 2455, loss: 0.2271
2023-02-04 23:59:31,482 - mmcls - INFO - Epoch [10][70/72]	lr: 4.169e-03, eta: 0:01:31, time: 0.098, data_time: 0.021, memory: 2455, loss: 0.2157
2023-02-04 23:59:31,610 - mmcls - INFO - Saving checkpoint at 10 epochs
2023-02-04 23:59:33,556 - mmcls - INFO - Epoch(val) [10][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-04 23:59:36,887 - mmcls - INFO - Epoch [11][10/72]	lr: 4.085e-03, eta: 0:01:31, time: 0.329, data_time: 0.254, memory: 2455, loss: 0.0948
2023-02-04 23:59:37,814 - mmcls - INFO - Epoch [11][20/72]	lr: 4.085e-03, eta: 0:01:29, time: 0.093, data_time: 0.009, memory: 2455, loss: 0.1361
2023-02-04 23:59:38,752 - mmcls - INFO - Epoch [11][30/72]	lr: 4.085e-03, eta: 0:01:28, time: 0.094, data_time: 0.015, memory: 2455, loss: 0.1350
2023-02-04 23:59:39,682 - mmcls - INFO - Epoch [11][40/72]	lr: 4.085e-03, eta: 0:01:26, time: 0.093, data_time: 0.010, memory: 2455, loss: 0.0902
2023-02-04 23:59:40,664 - mmcls - INFO - Epoch [11][50/72]	lr: 4.085e-03, eta: 0:01:25, time: 0.099, data_time: 0.022, memory: 2455, loss: 0.1523
2023-02-04 23:59:41,660 - mmcls - INFO - Epoch [11][60/72]	lr: 4.085e-03, eta: 0:01:23, time: 0.100, data_time: 0.018, memory: 2455, loss: 0.1762
2023-02-04 23:59:42,599 - mmcls - INFO - Epoch [11][70/72]	lr: 4.085e-03, eta: 0:01:22, time: 0.093, data_time: 0.004, memory: 2455, loss: 0.1369
2023-02-04 23:59:44,642 - mmcls - INFO - Epoch(val) [11][18]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-04 23:59:47,852 - mmcls - INFO - Epoch [12][10/72]	lr: 4.004e-03, eta: 0:01:21, time: 0.317, data_time: 0.241, memory: 2455, loss: 0.1459
2023-02-04 23:59:48,811 - mmcls - INFO - Epoch [12][20/72]	lr: 4.004e-03, eta: 0:01:20, time: 0.096, data_time: 0.010, memory: 2455, loss: 0.1898
2023-02-04 23:59:49,785 - mmcls - INFO - Epoch [12][30/72]	lr: 4.004e-03, eta: 0:01:18, time: 0.097, data_time: 0.019, memory: 2455, loss: 0.1412
2023-02-04 23:59:50,736 - mmcls - INFO - Epoch [12][40/72]	lr: 4.004e-03, eta: 0:01:17, time: 0.096, data_time: 0.007, memory: 2455, loss: 0.2087
2023-02-04 23:59:51,683 - mmcls - INFO - Epoch [12][50/72]	lr: 4.004e-03, eta: 0:01:15, time: 0.095, data_time: 0.003, memory: 2455, loss: 0.1619
2023-02-04 23:59:52,609 - mmcls - INFO - Epoch [12][60/72]	lr: 4.004e-03, eta: 0:01:14, time: 0.092, data_time: 0.004, memory: 2455, loss: 0.1682
2023-02-04 23:59:53,542 - mmcls - INFO - Epoch [12][70/72]	lr: 4.004e-03, eta: 0:01:12, time: 0.093, data_time: 0.004, memory: 2455, loss: 0.1825
2023-02-04 23:59:55,539 - mmcls - INFO - Epoch(val) [12][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-04 23:59:58,768 - mmcls - INFO - Epoch [13][10/72]	lr: 3.924e-03, eta: 0:01:12, time: 0.319, data_time: 0.241, memory: 2455, loss: 0.4510
2023-02-04 23:59:59,703 - mmcls - INFO - Epoch [13][20/72]	lr: 3.924e-03, eta: 0:01:10, time: 0.094, data_time: 0.004, memory: 2455, loss: 0.3825
2023-02-05 00:00:00,660 - mmcls - INFO - Epoch [13][30/72]	lr: 3.924e-03, eta: 0:01:09, time: 0.095, data_time: 0.003, memory: 2455, loss: 0.2917
2023-02-05 00:00:01,600 - mmcls - INFO - Epoch [13][40/72]	lr: 3.924e-03, eta: 0:01:07, time: 0.094, data_time: 0.004, memory: 2455, loss: 0.2074
2023-02-05 00:00:02,547 - mmcls - INFO - Epoch [13][50/72]	lr: 3.924e-03, eta: 0:01:06, time: 0.094, data_time: 0.005, memory: 2455, loss: 0.2838
2023-02-05 00:00:03,483 - mmcls - INFO - Epoch [13][60/72]	lr: 3.924e-03, eta: 0:01:05, time: 0.095, data_time: 0.015, memory: 2455, loss: 0.2417
2023-02-05 00:00:04,554 - mmcls - INFO - Epoch [13][70/72]	lr: 3.924e-03, eta: 0:01:03, time: 0.106, data_time: 0.032, memory: 2455, loss: 0.2493
2023-02-05 00:00:06,570 - mmcls - INFO - Epoch(val) [13][18]	accuracy_top-1: 93.5315, accuracy_top-5: 100.0000
2023-02-05 00:00:09,763 - mmcls - INFO - Epoch [14][10/72]	lr: 3.845e-03, eta: 0:01:03, time: 0.316, data_time: 0.237, memory: 2455, loss: 0.2227
2023-02-05 00:00:10,747 - mmcls - INFO - Epoch [14][20/72]	lr: 3.845e-03, eta: 0:01:01, time: 0.099, data_time: 0.023, memory: 2455, loss: 0.1784
2023-02-05 00:00:11,695 - mmcls - INFO - Epoch [14][30/72]	lr: 3.845e-03, eta: 0:01:00, time: 0.095, data_time: 0.027, memory: 2455, loss: 0.2132
2023-02-05 00:00:12,690 - mmcls - INFO - Epoch [14][40/72]	lr: 3.845e-03, eta: 0:00:58, time: 0.099, data_time: 0.022, memory: 2455, loss: 0.1582
2023-02-05 00:00:13,624 - mmcls - INFO - Epoch [14][50/72]	lr: 3.845e-03, eta: 0:00:57, time: 0.094, data_time: 0.008, memory: 2455, loss: 0.2373
2023-02-05 00:00:14,660 - mmcls - INFO - Epoch [14][60/72]	lr: 3.845e-03, eta: 0:00:55, time: 0.103, data_time: 0.025, memory: 2455, loss: 0.2189
2023-02-05 00:00:15,611 - mmcls - INFO - Epoch [14][70/72]	lr: 3.845e-03, eta: 0:00:54, time: 0.096, data_time: 0.015, memory: 2455, loss: 0.1427
2023-02-05 00:00:17,580 - mmcls - INFO - Epoch(val) [14][18]	accuracy_top-1: 94.0559, accuracy_top-5: 100.0000
2023-02-05 00:00:20,851 - mmcls - INFO - Epoch [15][10/72]	lr: 3.768e-03, eta: 0:00:53, time: 0.323, data_time: 0.246, memory: 2455, loss: 0.1294
2023-02-05 00:00:21,877 - mmcls - INFO - Epoch [15][20/72]	lr: 3.768e-03, eta: 0:00:52, time: 0.102, data_time: 0.031, memory: 2455, loss: 0.1101
2023-02-05 00:00:22,846 - mmcls - INFO - Epoch [15][30/72]	lr: 3.768e-03, eta: 0:00:51, time: 0.097, data_time: 0.011, memory: 2455, loss: 0.1402
2023-02-05 00:00:23,800 - mmcls - INFO - Epoch [15][40/72]	lr: 3.768e-03, eta: 0:00:49, time: 0.095, data_time: 0.004, memory: 2455, loss: 0.1139
2023-02-05 00:00:24,827 - mmcls - INFO - Epoch [15][50/72]	lr: 3.768e-03, eta: 0:00:48, time: 0.102, data_time: 0.025, memory: 2455, loss: 0.1590
2023-02-05 00:00:25,813 - mmcls - INFO - Epoch [15][60/72]	lr: 3.768e-03, eta: 0:00:46, time: 0.099, data_time: 0.021, memory: 2455, loss: 0.1089
2023-02-05 00:00:26,750 - mmcls - INFO - Epoch [15][70/72]	lr: 3.768e-03, eta: 0:00:45, time: 0.094, data_time: 0.004, memory: 2455, loss: 0.1193
2023-02-05 00:00:28,696 - mmcls - INFO - Epoch(val) [15][18]	accuracy_top-1: 94.2308, accuracy_top-5: 100.0000
2023-02-05 00:00:31,891 - mmcls - INFO - Epoch [16][10/72]	lr: 3.693e-03, eta: 0:00:44, time: 0.316, data_time: 0.233, memory: 2455, loss: 0.1722
2023-02-05 00:00:32,831 - mmcls - INFO - Epoch [16][20/72]	lr: 3.693e-03, eta: 0:00:43, time: 0.094, data_time: 0.004, memory: 2455, loss: 0.2659
2023-02-05 00:00:33,781 - mmcls - INFO - Epoch [16][30/72]	lr: 3.693e-03, eta: 0:00:41, time: 0.095, data_time: 0.004, memory: 2455, loss: 0.1413
2023-02-05 00:00:34,730 - mmcls - INFO - Epoch [16][40/72]	lr: 3.693e-03, eta: 0:00:40, time: 0.094, data_time: 0.004, memory: 2455, loss: 0.1385
2023-02-05 00:00:35,689 - mmcls - INFO - Epoch [16][50/72]	lr: 3.693e-03, eta: 0:00:39, time: 0.098, data_time: 0.004, memory: 2455, loss: 0.1597
2023-02-05 00:00:36,625 - mmcls - INFO - Epoch [16][60/72]	lr: 3.693e-03, eta: 0:00:37, time: 0.092, data_time: 0.010, memory: 2455, loss: 0.1920
2023-02-05 00:00:37,559 - mmcls - INFO - Epoch [16][70/72]	lr: 3.693e-03, eta: 0:00:36, time: 0.094, data_time: 0.012, memory: 2455, loss: 0.1929
2023-02-05 00:00:39,501 - mmcls - INFO - Epoch(val) [16][18]	accuracy_top-1: 93.8811, accuracy_top-5: 100.0000
2023-02-05 00:00:42,784 - mmcls - INFO - Epoch [17][10/72]	lr: 3.619e-03, eta: 0:00:35, time: 0.325, data_time: 0.248, memory: 2455, loss: 0.1335
2023-02-05 00:00:43,788 - mmcls - INFO - Epoch [17][20/72]	lr: 3.619e-03, eta: 0:00:34, time: 0.100, data_time: 0.020, memory: 2455, loss: 0.1406
2023-02-05 00:00:44,754 - mmcls - INFO - Epoch [17][30/72]	lr: 3.619e-03, eta: 0:00:32, time: 0.097, data_time: 0.018, memory: 2455, loss: 0.1129
2023-02-05 00:00:45,835 - mmcls - INFO - Epoch [17][40/72]	lr: 3.619e-03, eta: 0:00:31, time: 0.108, data_time: 0.030, memory: 2455, loss: 0.2199
2023-02-05 00:00:46,781 - mmcls - INFO - Epoch [17][50/72]	lr: 3.619e-03, eta: 0:00:30, time: 0.094, data_time: 0.018, memory: 2455, loss: 0.1741
2023-02-05 00:00:47,756 - mmcls - INFO - Epoch [17][60/72]	lr: 3.619e-03, eta: 0:00:28, time: 0.098, data_time: 0.024, memory: 2455, loss: 0.1340
2023-02-05 00:00:48,699 - mmcls - INFO - Epoch [17][70/72]	lr: 3.619e-03, eta: 0:00:27, time: 0.094, data_time: 0.016, memory: 2455, loss: 0.0988
2023-02-05 00:00:50,615 - mmcls - INFO - Epoch(val) [17][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
2023-02-05 00:00:53,777 - mmcls - INFO - Epoch [18][10/72]	lr: 3.547e-03, eta: 0:00:26, time: 0.313, data_time: 0.233, memory: 2455, loss: 0.0851
2023-02-05 00:00:54,763 - mmcls - INFO - Epoch [18][20/72]	lr: 3.547e-03, eta: 0:00:24, time: 0.098, data_time: 0.011, memory: 2455, loss: 0.1963
2023-02-05 00:00:55,718 - mmcls - INFO - Epoch [18][30/72]	lr: 3.547e-03, eta: 0:00:23, time: 0.096, data_time: 0.004, memory: 2455, loss: 0.0904
2023-02-05 00:00:56,670 - mmcls - INFO - Epoch [18][40/72]	lr: 3.547e-03, eta: 0:00:22, time: 0.095, data_time: 0.003, memory: 2455, loss: 0.2000
2023-02-05 00:00:57,625 - mmcls - INFO - Epoch [18][50/72]	lr: 3.547e-03, eta: 0:00:20, time: 0.095, data_time: 0.004, memory: 2455, loss: 0.0704
2023-02-05 00:00:58,559 - mmcls - INFO - Epoch [18][60/72]	lr: 3.547e-03, eta: 0:00:19, time: 0.094, data_time: 0.004, memory: 2455, loss: 0.1593
2023-02-05 00:00:59,496 - mmcls - INFO - Epoch [18][70/72]	lr: 3.547e-03, eta: 0:00:18, time: 0.093, data_time: 0.003, memory: 2455, loss: 0.1486
2023-02-05 00:01:01,395 - mmcls - INFO - Epoch(val) [18][18]	accuracy_top-1: 94.7552, accuracy_top-5: 100.0000
2023-02-05 00:01:04,649 - mmcls - INFO - Epoch [19][10/72]	lr: 3.476e-03, eta: 0:00:17, time: 0.322, data_time: 0.240, memory: 2455, loss: 0.1105
2023-02-05 00:01:05,587 - mmcls - INFO - Epoch [19][20/72]	lr: 3.476e-03, eta: 0:00:15, time: 0.094, data_time: 0.007, memory: 2455, loss: 0.1860
2023-02-05 00:01:06,588 - mmcls - INFO - Epoch [19][30/72]	lr: 3.476e-03, eta: 0:00:14, time: 0.099, data_time: 0.023, memory: 2455, loss: 0.1415
2023-02-05 00:01:07,610 - mmcls - INFO - Epoch [19][40/72]	lr: 3.476e-03, eta: 0:00:13, time: 0.103, data_time: 0.025, memory: 2455, loss: 0.1299
2023-02-05 00:01:08,544 - mmcls - INFO - Epoch [19][50/72]	lr: 3.476e-03, eta: 0:00:11, time: 0.094, data_time: 0.007, memory: 2455, loss: 0.1112
2023-02-05 00:01:09,519 - mmcls - INFO - Epoch [19][60/72]	lr: 3.476e-03, eta: 0:00:10, time: 0.096, data_time: 0.017, memory: 2455, loss: 0.0719
2023-02-05 00:01:10,467 - mmcls - INFO - Epoch [19][70/72]	lr: 3.476e-03, eta: 0:00:09, time: 0.095, data_time: 0.016, memory: 2455, loss: 0.0866
2023-02-05 00:01:12,506 - mmcls - INFO - Epoch(val) [19][18]	accuracy_top-1: 95.1049, accuracy_top-5: 100.0000
2023-02-05 00:01:15,728 - mmcls - INFO - Epoch [20][10/72]	lr: 3.406e-03, eta: 0:00:07, time: 0.319, data_time: 0.236, memory: 2455, loss: 0.1863
2023-02-05 00:01:16,668 - mmcls - INFO - Epoch [20][20/72]	lr: 3.406e-03, eta: 0:00:06, time: 0.093, data_time: 0.007, memory: 2455, loss: 0.1882
2023-02-05 00:01:17,755 - mmcls - INFO - Epoch [20][30/72]	lr: 3.406e-03, eta: 0:00:05, time: 0.108, data_time: 0.032, memory: 2455, loss: 0.1491
2023-02-05 00:01:18,720 - mmcls - INFO - Epoch [20][40/72]	lr: 3.406e-03, eta: 0:00:04, time: 0.097, data_time: 0.018, memory: 2455, loss: 0.1258
2023-02-05 00:01:19,652 - mmcls - INFO - Epoch [20][50/72]	lr: 3.406e-03, eta: 0:00:02, time: 0.093, data_time: 0.015, memory: 2455, loss: 0.0994
2023-02-05 00:01:20,601 - mmcls - INFO - Epoch [20][60/72]	lr: 3.406e-03, eta: 0:00:01, time: 0.095, data_time: 0.004, memory: 2455, loss: 0.1254
2023-02-05 00:01:21,573 - mmcls - INFO - Epoch [20][70/72]	lr: 3.406e-03, eta: 0:00:00, time: 0.096, data_time: 0.018, memory: 2455, loss: 0.1092
2023-02-05 00:01:21,702 - mmcls - INFO - Saving checkpoint at 20 epochs
2023-02-05 00:01:23,620 - mmcls - INFO - Epoch(val) [20][18]	accuracy_top-1: 94.9301, accuracy_top-5: 100.0000
